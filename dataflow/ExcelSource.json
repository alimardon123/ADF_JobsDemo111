{
	"name": "ExcelSource",
	"properties": {
		"folder": {
			"name": "VideoClasses"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dsExcel",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "AzureSQLWithoutParameter",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "OutPutFiles",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "split1"
				},
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as integer '000',",
				"          Name as string,",
				"          Age as integer,",
				"          PhoneNumber as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          ID as integer,",
				"          Name as string,",
				"          Age as integer,",
				"          PhoneNumber as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"split1@NamesWithS derive(RecordDate = currentDate()) ~> derivedColumn1",
				"union1 split(startsWith(Name, 'B'),",
				"     disjoint: true) ~> split1@(NamesWithS)",
				"source1, source2 union(byName: true,",
				"     partitionBy('roundRobin', 2))~> union1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['ConditionalSplit.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     quoteAll: true,",
				"     saveOrder: 1,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}